/**
 * ORY Hydra
 * Welcome to the ORY Hydra HTTP API documentation. You will find documentation for all HTTP APIs here.
 *
 * The version of the OpenAPI document: latest
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
package sh.ory.hydra.model

import com.fasterxml.jackson.annotation.JsonProperty
import io.quarkus.runtime.annotations.RegisterForReflection

/**
 * https://tools.ietf.org/html/rfc7662
 * @param active Active is a boolean indicator of whether or not the presented token is currently active.  The specifics of a token's \"active\" state will vary depending on the implementation of the authorization server and the information it keeps about its tokens, but a \"true\" value return for the \"active\" property will generally indicate that a given token has been issued by this authorization server, has not been revoked by the resource owner, and is within its given time window of validity (e.g., after its issuance time and before its expiration time).
 * @param aud Audience contains a list of the token's intended audiences.
 * @param clientId ID is aclient identifier for the OAuth 2.0 client that requested this token.
 * @param exp Expires at is an integer timestamp, measured in the number of seconds since January 1 1970 UTC, indicating when this token will expire.
 * @param ext Extra is arbitrary data set by the session.
 * @param iat Issued at is an integer timestamp, measured in the number of seconds since January 1 1970 UTC, indicating when this token was originally issued.
 * @param iss IssuerURL is a string representing the issuer of this token
 * @param nbf NotBefore is an integer timestamp, measured in the number of seconds since January 1 1970 UTC, indicating when this token is not to be used before.
 * @param obfuscatedSubject ObfuscatedSubject is set when the subject identifier algorithm was set to \"pairwise\" during authorization. It is the `sub` value of the ID Token that was issued.
 * @param scope Scope is a JSON string containing a space-separated list of scopes associated with this token.
 * @param sub Subject of the token, as defined in JWT [RFC7519]. Usually a machine-readable identifier of the resource owner who authorized this token.
 * @param tokenType TokenType is the introspected token's type, typically `Bearer`.
 * @param tokenUse TokenUse is the introspected token's use, for example `access_token` or `refresh_token`.
 * @param username Username is a human-readable identifier for the resource owner who authorized this token.
 */

@RegisterForReflection
data class OAuth2TokenIntrospection(
    /* Active is a boolean indicator of whether or not the presented token is currently active.  The specifics of a token's \"active\" state will vary depending on the implementation of the authorization server and the information it keeps about its tokens, but a \"true\" value return for the \"active\" property will generally indicate that a given token has been issued by this authorization server, has not been revoked by the resource owner, and is within its given time window of validity (e.g., after its issuance time and before its expiration time). */
    @JsonProperty("active")
    val active: kotlin.Boolean,
    /* Audience contains a list of the token's intended audiences. */
    @JsonProperty("aud")
    val aud: kotlin.collections.List<kotlin.String>? = null,
    /* ID is aclient identifier for the OAuth 2.0 client that requested this token. */
    @JsonProperty("client_id")
    val clientId: kotlin.String? = null,
    /* Expires at is an integer timestamp, measured in the number of seconds since January 1 1970 UTC, indicating when this token will expire. */
    @JsonProperty("exp")
    val exp: kotlin.Long? = null,
    /* Extra is arbitrary data set by the session. */
    @JsonProperty("ext")
    val ext: kotlin.Any? = null,
    /* Issued at is an integer timestamp, measured in the number of seconds since January 1 1970 UTC, indicating when this token was originally issued. */
    @JsonProperty("iat")
    val iat: kotlin.Long? = null,
    /* IssuerURL is a string representing the issuer of this token */
    @JsonProperty("iss")
    val iss: kotlin.String? = null,
    /* NotBefore is an integer timestamp, measured in the number of seconds since January 1 1970 UTC, indicating when this token is not to be used before. */
    @JsonProperty("nbf")
    val nbf: kotlin.Long? = null,
    /* ObfuscatedSubject is set when the subject identifier algorithm was set to \"pairwise\" during authorization. It is the `sub` value of the ID Token that was issued. */
    @JsonProperty("obfuscated_subject")
    val obfuscatedSubject: kotlin.String? = null,
    /* Scope is a JSON string containing a space-separated list of scopes associated with this token. */
    @JsonProperty("scope")
    val scope: kotlin.String? = null,
    /* Subject of the token, as defined in JWT [RFC7519]. Usually a machine-readable identifier of the resource owner who authorized this token. */
    @JsonProperty("sub")
    val sub: kotlin.String? = null,
    /* TokenType is the introspected token's type, typically `Bearer`. */
    @JsonProperty("token_type")
    val tokenType: kotlin.String? = null,
    /* TokenUse is the introspected token's use, for example `access_token` or `refresh_token`. */
    @JsonProperty("token_use")
    val tokenUse: kotlin.String? = null,
    /* Username is a human-readable identifier for the resource owner who authorized this token. */
    @JsonProperty("username")
    val username: kotlin.String? = null,
)
