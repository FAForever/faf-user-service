/**
* ORY Hydra
* Welcome to the ORY Hydra HTTP API documentation. You will find documentation for all HTTP APIs here.
*
* The version of the OpenAPI document: latest
*
*
* NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
* https://openapi-generator.tech
* Do not edit the class manually.
*/
package sh.ory.hydra.model

import com.fasterxml.jackson.annotation.JsonProperty

/**
 *
 * @param allowedCorsOrigins
 * @param audience
 * @param backchannelLogoutSessionRequired Boolean value specifying whether the RP requires that a sid (session ID) Claim be included in the Logout Token to identify the RP session with the OP when the backchannel_logout_uri is used. If omitted, the default value is false.
 * @param backchannelLogoutUri RP URL that will cause the RP to log itself out when sent a Logout Token by the OP.
 * @param clientId ID  is the id for this client.
 * @param clientName Name is the human-readable string name of the client to be presented to the end-user during authorization.
 * @param clientSecret Secret is the client's secret. The secret will be included in the create request as cleartext, and then never again. The secret is stored using BCrypt so it is impossible to recover it. Tell your users that they need to write the secret down as it will not be made available again.
 * @param clientSecretExpiresAt SecretExpiresAt is an integer holding the time at which the client secret will expire or 0 if it will not expire. The time is represented as the number of seconds from 1970-01-01T00:00:00Z as measured in UTC until the date/time of expiration.  This feature is currently not supported and it's value will always be set to 0.
 * @param clientUri ClientURI is an URL string of a web page providing information about the client. If present, the server SHOULD display this URL to the end-user in a clickable fashion.
 * @param contacts
 * @param createdAt CreatedAt returns the timestamp of the client's creation.
 * @param frontchannelLogoutSessionRequired Boolean value specifying whether the RP requires that iss (issuer) and sid (session ID) query parameters be included to identify the RP session with the OP when the frontchannel_logout_uri is used. If omitted, the default value is false.
 * @param frontchannelLogoutUri RP URL that will cause the RP to log itself out when rendered in an iframe by the OP. An iss (issuer) query parameter and a sid (session ID) query parameter MAY be included by the OP to enable the RP to validate the request and to determine which of the potentially multiple sessions is to be logged out; if either is included, both MUST be.
 * @param grantTypes
 * @param jwks
 * @param jwksUri URL for the Client's JSON Web Key Set [JWK] document. If the Client signs requests to the Server, it contains the signing key(s) the Server uses to validate signatures from the Client. The JWK Set MAY also contain the Client's encryption keys(s), which are used by the Server to encrypt responses to the Client. When both signing and encryption keys are made available, a use (Key Use) parameter value is REQUIRED for all keys in the referenced JWK Set to indicate each key's intended usage. Although some algorithms allow the same key to be used for both signatures and encryption, doing so is NOT RECOMMENDED, as it is less secure. The JWK x5c parameter MAY be used to provide X.509 representations of keys provided. When used, the bare key values MUST still be present and MUST match those in the certificate.
 * @param logoUri LogoURI is an URL string that references a logo for the client.
 * @param metadata
 * @param owner Owner is a string identifying the owner of the OAuth 2.0 Client.
 * @param policyUri PolicyURI is a URL string that points to a human-readable privacy policy document that describes how the deployment organization collects, uses, retains, and discloses personal data.
 * @param postLogoutRedirectUris
 * @param redirectUris
 * @param requestObjectSigningAlg JWS [JWS] alg algorithm [JWA] that MUST be used for signing Request Objects sent to the OP. All Request Objects from this Client MUST be rejected, if not signed with this algorithm.
 * @param requestUris
 * @param responseTypes
 * @param scope Scope is a string containing a space-separated list of scope values (as described in Section 3.3 of OAuth 2.0 [RFC6749]) that the client can use when requesting access tokens.
 * @param sectorIdentifierUri URL using the https scheme to be used in calculating Pseudonymous Identifiers by the OP. The URL references a file with a single JSON array of redirect_uri values.
 * @param subjectType SubjectType requested for responses to this Client. The subject_types_supported Discovery parameter contains a list of the supported subject_type values for this server. Valid types include `pairwise` and `public`.
 * @param tokenEndpointAuthMethod Requested Client Authentication method for the Token Endpoint. The options are client_secret_post, client_secret_basic, private_key_jwt, and none.
 * @param tokenEndpointAuthSigningAlg Requested Client Authentication signing algorithm for the Token Endpoint.
 * @param tosUri TermsOfServiceURI is a URL string that points to a human-readable terms of service document for the client that describes a contractual relationship between the end-user and the client that the end-user accepts when authorizing the client.
 * @param updatedAt UpdatedAt returns the timestamp of the last update.
 * @param userinfoSignedResponseAlg JWS alg algorithm [JWA] REQUIRED for signing UserInfo Responses. If this is specified, the response will be JWT [JWT] serialized, and signed using JWS. The default, if omitted, is for the UserInfo Response to return the Claims as a UTF-8 encoded JSON object using the application/json content-type.
 */

data class OAuth2Client(
    @field:JsonProperty("allowed_cors_origins")
    val allowedCorsOrigins: kotlin.collections.List<kotlin.String>? = null,
    @field:JsonProperty("audience")
    val audience: kotlin.collections.List<kotlin.String>? = null,
    /* Boolean value specifying whether the RP requires that a sid (session ID) Claim be included in the Logout Token to identify the RP session with the OP when the backchannel_logout_uri is used. If omitted, the default value is false. */
    @field:JsonProperty("backchannel_logout_session_required")
    val backchannelLogoutSessionRequired: kotlin.Boolean? = null,
    /* RP URL that will cause the RP to log itself out when sent a Logout Token by the OP. */
    @field:JsonProperty("backchannel_logout_uri")
    val backchannelLogoutUri: kotlin.String? = null,
    /* ID  is the id for this client. */
    @field:JsonProperty("client_id")
    val clientId: kotlin.String? = null,
    /* Name is the human-readable string name of the client to be presented to the end-user during authorization. */
    @field:JsonProperty("client_name")
    val clientName: kotlin.String? = null,
    /* Secret is the client's secret. The secret will be included in the create request as cleartext, and then never again. The secret is stored using BCrypt so it is impossible to recover it. Tell your users that they need to write the secret down as it will not be made available again. */
    @field:JsonProperty("client_secret")
    val clientSecret: kotlin.String? = null,
    /* SecretExpiresAt is an integer holding the time at which the client secret will expire or 0 if it will not expire. The time is represented as the number of seconds from 1970-01-01T00:00:00Z as measured in UTC until the date/time of expiration.  This feature is currently not supported and it's value will always be set to 0. */
    @field:JsonProperty("client_secret_expires_at")
    val clientSecretExpiresAt: kotlin.Long? = null,
    /* ClientURI is an URL string of a web page providing information about the client. If present, the server SHOULD display this URL to the end-user in a clickable fashion. */
    @field:JsonProperty("client_uri")
    val clientUri: kotlin.String? = null,
    @field:JsonProperty("contacts")
    val contacts: kotlin.collections.List<kotlin.String>? = null,
    /* CreatedAt returns the timestamp of the client's creation. */
    @field:JsonProperty("created_at")
    val createdAt: java.time.OffsetDateTime? = null,
    /* Boolean value specifying whether the RP requires that iss (issuer) and sid (session ID) query parameters be included to identify the RP session with the OP when the frontchannel_logout_uri is used. If omitted, the default value is false. */
    @field:JsonProperty("frontchannel_logout_session_required")
    val frontchannelLogoutSessionRequired: kotlin.Boolean? = null,
    /* RP URL that will cause the RP to log itself out when rendered in an iframe by the OP. An iss (issuer) query parameter and a sid (session ID) query parameter MAY be included by the OP to enable the RP to validate the request and to determine which of the potentially multiple sessions is to be logged out; if either is included, both MUST be. */
    @field:JsonProperty("frontchannel_logout_uri")
    val frontchannelLogoutUri: kotlin.String? = null,
    @field:JsonProperty("grant_types")
    val grantTypes: kotlin.collections.List<kotlin.String>? = null,
    @field:JsonProperty("jwks")
    val jwks: kotlin.Any? = null,
    /* URL for the Client's JSON Web Key Set [JWK] document. If the Client signs requests to the Server, it contains the signing key(s) the Server uses to validate signatures from the Client. The JWK Set MAY also contain the Client's encryption keys(s), which are used by the Server to encrypt responses to the Client. When both signing and encryption keys are made available, a use (Key Use) parameter value is REQUIRED for all keys in the referenced JWK Set to indicate each key's intended usage. Although some algorithms allow the same key to be used for both signatures and encryption, doing so is NOT RECOMMENDED, as it is less secure. The JWK x5c parameter MAY be used to provide X.509 representations of keys provided. When used, the bare key values MUST still be present and MUST match those in the certificate. */
    @field:JsonProperty("jwks_uri")
    val jwksUri: kotlin.String? = null,
    /* LogoURI is an URL string that references a logo for the client. */
    @field:JsonProperty("logo_uri")
    val logoUri: kotlin.String? = null,
    @field:JsonProperty("metadata")
    val metadata: kotlin.Any? = null,
    /* Owner is a string identifying the owner of the OAuth 2.0 Client. */
    @field:JsonProperty("owner")
    val owner: kotlin.String? = null,
    /* PolicyURI is a URL string that points to a human-readable privacy policy document that describes how the deployment organization collects, uses, retains, and discloses personal data. */
    @field:JsonProperty("policy_uri")
    val policyUri: kotlin.String? = null,
    @field:JsonProperty("post_logout_redirect_uris")
    val postLogoutRedirectUris: kotlin.collections.List<kotlin.String>? = null,
    @field:JsonProperty("redirect_uris")
    val redirectUris: kotlin.collections.List<kotlin.String>? = null,
    /* JWS [JWS] alg algorithm [JWA] that MUST be used for signing Request Objects sent to the OP. All Request Objects from this Client MUST be rejected, if not signed with this algorithm. */
    @field:JsonProperty("request_object_signing_alg")
    val requestObjectSigningAlg: kotlin.String? = null,
    @field:JsonProperty("request_uris")
    val requestUris: kotlin.collections.List<kotlin.String>? = null,
    @field:JsonProperty("response_types")
    val responseTypes: kotlin.collections.List<kotlin.String>? = null,
    /* Scope is a string containing a space-separated list of scope values (as described in Section 3.3 of OAuth 2.0 [RFC6749]) that the client can use when requesting access tokens. */
    @field:JsonProperty("scope")
    val scope: kotlin.String? = null,
    /* URL using the https scheme to be used in calculating Pseudonymous Identifiers by the OP. The URL references a file with a single JSON array of redirect_uri values. */
    @field:JsonProperty("sector_identifier_uri")
    val sectorIdentifierUri: kotlin.String? = null,
    /* SubjectType requested for responses to this Client. The subject_types_supported Discovery parameter contains a list of the supported subject_type values for this server. Valid types include `pairwise` and `public`. */
    @field:JsonProperty("subject_type")
    val subjectType: kotlin.String? = null,
    /* Requested Client Authentication method for the Token Endpoint. The options are client_secret_post, client_secret_basic, private_key_jwt, and none. */
    @field:JsonProperty("token_endpoint_auth_method")
    val tokenEndpointAuthMethod: kotlin.String? = null,
    /* Requested Client Authentication signing algorithm for the Token Endpoint. */
    @field:JsonProperty("token_endpoint_auth_signing_alg")
    val tokenEndpointAuthSigningAlg: kotlin.String? = null,
    /* TermsOfServiceURI is a URL string that points to a human-readable terms of service document for the client that describes a contractual relationship between the end-user and the client that the end-user accepts when authorizing the client. */
    @field:JsonProperty("tos_uri")
    val tosUri: kotlin.String? = null,
    /* UpdatedAt returns the timestamp of the last update. */
    @field:JsonProperty("updated_at")
    val updatedAt: java.time.OffsetDateTime? = null,
    /* JWS alg algorithm [JWA] REQUIRED for signing UserInfo Responses. If this is specified, the response will be JWT [JWT] serialized, and signed using JWS. The default, if omitted, is for the UserInfo Response to return the Claims as a UTF-8 encoded JSON object using the application/json content-type. */
    @field:JsonProperty("userinfo_signed_response_alg")
    val userinfoSignedResponseAlg: kotlin.String? = null
)
